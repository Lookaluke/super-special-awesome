#summary Class an API design here
#labels Featured,Phase-Design,Phase-Implementation

= Class design =

This is really important, so spend a lot of time perfecting this



== public class Pokemon ==

=== Description ===

This class will store:
  * name
  * level (and experience)
  * attack
  * defense
  * special
  * speed
  * image
  * moves
  * element 1
  * element 2
  * status

Methods that return most of the data. Also a method to gain experience (which controls level-up stat increases), and a method to temporarily increase/reduce HP, and other stuff (used by Moves and Battle). Also, a method for status changing.

=== Status ===

started, not sure how far along it is.



== public class Move ==

=== Description ===

This class will store:
  * power
  * animation
  * element
  * name
  * accuracy

Methods that access these data values.

=== Status ===

Non started yet.



== public class Character ==

== public class Trainer extends NPC ==

== public class NPC ==

== public class GymLeader extends Trainer ==

== public enum Element ==

=== Description ===

Defines the different elements of pokemon. Has methods like `double getMultiplierAgainst(Element other)` to get the attack multiplier

=== Status ===

completed, unless we decide to update to gold/silver/more recent

== public class Battle ==

=== Description ===

The Battle class does all the calculations based on the amazing guide at gamefaqs. Stores two Pokemon

=== Status ===

Barely started. Waiting for Move and Pokemon to finish